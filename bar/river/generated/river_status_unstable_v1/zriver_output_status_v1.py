# This file has been autogenerated by the pywayland scanner

# Copyright 2020 The River Developers
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from __future__ import annotations

from pywayland.protocol_core import (Argument, ArgumentType, Global, Interface,
                                     Proxy, Resource)


class ZriverOutputStatusV1(Interface):
    """Track output tags and focus

    This interface allows clients to receive information about the current
    windowing state of an output.
    """

    name = "zriver_output_status_v1"
    version = 4


class ZriverOutputStatusV1Proxy(Proxy[ZriverOutputStatusV1]):
    interface = ZriverOutputStatusV1

    @ZriverOutputStatusV1.request()
    def destroy(self) -> None:
        """Destroy the river_output_status object

        This request indicates that the client will not use the
        river_output_status object any more.
        """
        self._marshal(0)
        self._destroy()


class ZriverOutputStatusV1Resource(Resource):
    interface = ZriverOutputStatusV1

    @ZriverOutputStatusV1.event(
        Argument(ArgumentType.Uint),
    )
    def focused_tags(self, tags: int) -> None:
        """Focused tags of the output

        Sent once binding the interface and again whenever the tag focus of the
        output changes.

        :param tags:
            32-bit bitfield
        :type tags:
            `ArgumentType.Uint`
        """
        self._post_event(0, tags)

    @ZriverOutputStatusV1.event(
        Argument(ArgumentType.Array),
    )
    def view_tags(self, tags: list) -> None:
        """Tag state of an output's views

        Sent once on binding the interface and again whenever the tag state of
        the output changes.

        :param tags:
            array of 32-bit bitfields
        :type tags:
            `ArgumentType.Array`
        """
        self._post_event(1, tags)

    @ZriverOutputStatusV1.event(
        Argument(ArgumentType.Uint),
        version=2,
    )
    def urgent_tags(self, tags: int) -> None:
        """Tags of the output with an urgent view

        Sent once on binding the interface and again whenever the set of tags
        with at least one urgent view changes.

        :param tags:
            32-bit bitfield
        :type tags:
            `ArgumentType.Uint`
        """
        self._post_event(2, tags)

    @ZriverOutputStatusV1.event(
        Argument(ArgumentType.String),
        version=4,
    )
    def layout_name(self, name: str) -> None:
        """Name of the layout

        Sent once on binding the interface should a layout name exist and again
        whenever the name changes.

        :param name:
            layout name
        :type name:
            `ArgumentType.String`
        """
        self._post_event(3, name)

    @ZriverOutputStatusV1.event(version=4)
    def layout_name_clear(self) -> None:
        """Name of the layout

        Sent when the current layout name has been removed without a new one
        being set, for example when the active layout generator disconnects.
        """
        self._post_event(4)


class ZriverOutputStatusV1Global(Global):
    interface = ZriverOutputStatusV1


ZriverOutputStatusV1._gen_c()
ZriverOutputStatusV1.proxy_class = ZriverOutputStatusV1Proxy
ZriverOutputStatusV1.resource_class = ZriverOutputStatusV1Resource
ZriverOutputStatusV1.global_class = ZriverOutputStatusV1Global
