# This file has been autogenerated by the pywayland scanner

# Copyright 2020 The River Developers
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from __future__ import annotations

from pywayland.protocol.wayland import WlOutput
from pywayland.protocol_core import (Argument, ArgumentType, Global, Interface,
                                     Proxy, Resource)


class ZriverSeatStatusV1(Interface):
    """Track seat focus

    This interface allows clients to receive information about the current
    focus of a seat. Note that (un)focused_output events will only be sent if
    the client has bound the relevant
    :class:`~pywayland.protocol.wayland.WlOutput` globals.
    """

    name = "zriver_seat_status_v1"
    version = 3


class ZriverSeatStatusV1Proxy(Proxy[ZriverSeatStatusV1]):
    interface = ZriverSeatStatusV1

    @ZriverSeatStatusV1.request()
    def destroy(self) -> None:
        """Destroy the river_seat_status object

        This request indicates that the client will not use the
        river_seat_status object any more.
        """
        self._marshal(0)
        self._destroy()


class ZriverSeatStatusV1Resource(Resource):
    interface = ZriverSeatStatusV1

    @ZriverSeatStatusV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def focused_output(self, output: WlOutput) -> None:
        """The seat focused an output

        Sent on binding the interface and again whenever an output gains focus.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(0, output)

    @ZriverSeatStatusV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def unfocused_output(self, output: WlOutput) -> None:
        """The seat unfocused an output

        Sent whenever an output loses focus.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(1, output)

    @ZriverSeatStatusV1.event(
        Argument(ArgumentType.String),
    )
    def focused_view(self, title: str) -> None:
        """Information on the focused view

        Sent once on binding the interface and again whenever the focused view
        or a property thereof changes. The title may be an empty string if no
        view is focused or the focused view did not set a title.

        :param title:
            title of the focused view
        :type title:
            `ArgumentType.String`
        """
        self._post_event(2, title)

    @ZriverSeatStatusV1.event(
        Argument(ArgumentType.String),
        version=3,
    )
    def mode(self, name: str) -> None:
        """The active mode changed

        Sent once on binding the interface and again whenever a new mode is
        entered (e.g. with riverctl enter-mode foobar).

        :param name:
            name of the mode
        :type name:
            `ArgumentType.String`
        """
        self._post_event(3, name)


class ZriverSeatStatusV1Global(Global):
    interface = ZriverSeatStatusV1


ZriverSeatStatusV1._gen_c()
ZriverSeatStatusV1.proxy_class = ZriverSeatStatusV1Proxy
ZriverSeatStatusV1.resource_class = ZriverSeatStatusV1Resource
ZriverSeatStatusV1.global_class = ZriverSeatStatusV1Global
